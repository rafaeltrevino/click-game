{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/GameCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","message","userScore","topScore","Jumbotron","GameCard","onClick","select","id","alt","name","src","image","App","state","fruits","selectedFruits","selectFruit","_this","includes","setState","push","newScore","shuffleFruit","fruitArray","array","i","j","temp","length","Math","floor","random","shuffle","handleClick","_this2","this","components_Navbar","components_Jumbotron","map","fruit","components_GameCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAYeA,MAVf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,0BAC3BF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYJ,EAAMK,SAClCJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,eAAwCJ,EAAMM,UAA9C,qBAA2EN,EAAMO,SAAjF,OCQGC,MAbf,WACI,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,iCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6ECOLK,MAZf,SAAkBT,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOM,QAAS,kBAAMV,EAAMW,OAAOX,EAAMY,MACpDX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,KAAMC,IAAKf,EAAMgB,mBCiFtCC,6MAhFbC,MAAQ,CACNZ,UAAW,EACXC,SAAU,EACVY,SACAC,eAAgB,GAChBf,QAAS,sBAGXgB,YAAc,SAACT,GACb,IAAIQ,EAAiBE,EAAKJ,MAAME,eAChC,GAAIA,EAAeG,SAASX,GAAK,CAE/BU,EAAKE,SAAS,CACZlB,UAFa,EAGbD,QAAS,oBACTe,eAAgB,SAEb,CACLA,EAAeK,KAAKb,GACpB,IAAIc,EAAWJ,EAAKJ,MAAMZ,UAAY,EAEtCgB,EAAKE,SAAS,CACZlB,UAAWoB,EACXrB,QAAS,QACTE,SAJyBmB,EAAWJ,EAAKJ,MAAMX,SAAYe,EAAKJ,MAAMX,SAAW,EAAIe,EAAKJ,MAAMX,eAStGoB,aAAe,WACb,IAAIC,EAAaN,EAAKJ,MAAMC,QAC5B,SAAiBU,GACf,IAAIC,EAAI,EACNC,EAAI,EACJC,EAAO,KACT,IAAKF,EAAID,EAAMI,OAAS,EAAGH,EAAI,EAAGA,GAAK,EACrCC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAMC,GACbD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKC,EAGfK,CAAQT,GACRN,EAAKE,SAAS,CACZL,OAAQS,OAIZU,YAAc,SAAC1B,GACbU,EAAKD,YAAYT,GACjBU,EAAKK,wFAGE,IAAAY,EAAAC,KACP,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,CACEpC,QAASmC,KAAKtB,MAAMb,QACpBC,UAAWkC,KAAKtB,MAAMZ,UACtBC,SAAUiC,KAAKtB,MAAMX,WAEzBN,EAAAC,EAAAC,cAACuC,EAAD,MACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVoC,KAAKtB,MAAMC,OAAOwB,IAAI,SAAAC,GAAK,OACxB3C,EAAAC,EAAAC,cAAC0C,EAAD,CACEC,IAAKF,EAAMhC,GACXA,GAAIgC,EAAMhC,GACVE,KAAM8B,EAAM9B,KACZE,MAAO4B,EAAM5B,MACbL,OAAQ4B,EAAKD,0BAxEfS,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1120cdb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar sticky-top navbar-dark bg-primary \">\n            <span className=\"nav-item\"><h2>Loop Fruits</h2></span>\n            <span className=\"nav-item\">{props.message}</span>\n            <span className=\"nav-item\">Your score: {props.userScore} | Highest score: {props.topScore} </span>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React from 'react';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"container\">\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <h1 className=\"display-4\">We’re Going Loop Fruits!</h1>\n                    <p className=\"lead\">Click on an image only once; otherwise, you have to start over.</p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Jumbotron;","import React from 'react';\nimport './style.css';\n\nfunction GameCard(props) {\n    return (\n        <div className=\"col\">\n            <div className=\"card\" onClick={() => props.select(props.id)}>\n                <div className=\"img-container\">\n                    <img alt={props.name} src={props.image} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default GameCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from './components/Jumbotron';\nimport GameCard from './components/GameCard';\nimport fruits from \"./fruits.json\";\n\nclass App extends Component {\n\n  state = {\n    userScore: 0,\n    topScore: 0,\n    fruits,\n    selectedFruits: [],\n    message: \"Let‘s play!\"\n  }\n\n  selectFruit = (id) => {\n    let selectedFruits = this.state.selectedFruits;\n    if (selectedFruits.includes(id)) {\n      let newScore = 0;\n      this.setState({\n        userScore: newScore,\n        message: \"Sorry, try again.\",\n        selectedFruits: []\n      });\n    } else {\n      selectedFruits.push(id);\n      let newScore = this.state.userScore + 1;\n      const newTopScore = () => (newScore > this.state.topScore) ? this.state.topScore + 1 : this.state.topScore;\n      this.setState({\n        userScore: newScore,\n        message: \"Good!\",\n        topScore: newTopScore()\n      });\n    };\n  };\n\n  shuffleFruit = () => {\n    let fruitArray = this.state.fruits;\n    function shuffle(array) {\n      var i = 0,\n        j = 0,\n        temp = null\n      for (i = array.length - 1; i > 0; i -= 1) {\n        j = Math.floor(Math.random() * (i + 1))\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      };\n    }\n    shuffle(fruitArray);\n    this.setState({\n      fruits: fruitArray\n    });\n  };\n\n  handleClick = (id) => {\n    this.selectFruit(id);\n    this.shuffleFruit();\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          message={this.state.message}\n          userScore={this.state.userScore}\n          topScore={this.state.topScore}\n        />\n      <Jumbotron />\n        <div className=\"container\">\n          <div className=\"row\">\n              {this.state.fruits.map(fruit => (\n                  <GameCard\n                    key={fruit.id}\n                    id={fruit.id}\n                    name={fruit.name}\n                    image={fruit.image}\n                    select={this.handleClick}\n                  />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}